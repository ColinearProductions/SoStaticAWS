{"remainingRequest":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\node_modules\\vue-loader\\lib\\selector.js?type=script&index=0!C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\src\\components\\Forms.vue","dependencies":[{"path":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\src\\components\\Forms.vue","mtime":1546435708287},{"path":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\package.json","mtime":1546612805811},{"path":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524914320675},{"path":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000},{"path":"C:\\Users\\Colinear\\WebstormProjects\\VueSoStatic\\site\\node_modules\\vue-loader\\lib\\selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["import _typeof from \"C:\\\\Users\\\\Colinear\\\\WebstormProjects\\\\VueSoStatic\\\\site\\\\node_modules\\\\@babel\\\\runtime/helpers/typeof\";\nimport \"core-js/modules/es7.object.values\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport FormCard from \"./FormCard\";\n\nfunction objToArray(obj) {\n  return Object.keys(obj).map(function (key) {\n    obj[key]['key'] = key;\n    return obj[key];\n  });\n}\n\nexport default {\n  name: \"Forms\",\n  components: {\n    FormCard: FormCard\n  },\n  data: function data() {\n    return {\n      dialogModel: {\n        visible: false,\n        title: '',\n        useRecaptcha: false,\n        aliasField: \"\",\n        confirmButton: \"Create\",\n        update: false,\n        formToBeUpdatedId: '',\n        formToBeUpdated: null\n      },\n      deleteFormDialog: {\n        visible: false //todo\n\n      },\n      formValidModel: false\n    };\n  },\n  methods: {\n    min3: function min3(v) {\n      return v.length >= 3 || 'Field must have more than 3 characters';\n    },\n    uniqueFormName: function uniqueFormName(v) {\n      var _this = this;\n\n      var res = true;\n      if (this.currentWebsite.forms === undefined) return true;\n      Object.values(this.currentWebsite.forms).forEach(function (form) {\n        // if the form didnt change name\n        if (_this.dialogModel.formToBeUpdated !== null && _this.dialogModel.formToBeUpdated.alias === v) return true;\n        if (v === form.alias) res = false;\n      });\n      return res || 'Form name must be unique to avoid confusion';\n    },\n    onAddFormConfirm: function onAddFormConfirm() {\n      if (!this.formValidModel) return;\n\n      if (this.dialogModel.update) {\n        this.$store.dispatch('updateForm', {\n          alias: this.dialogModel.aliasField,\n          recaptcha: this.dialogModel.useRecaptcha,\n          form_id: this.dialogModel.formToBeUpdatedId\n        });\n      } else {\n        this.$store.dispatch('addFormToWebsite', {\n          alias: this.dialogModel.aliasField,\n          recaptcha: this.dialogModel.useRecaptcha\n        });\n      }\n\n      this.dialogModel.visible = false;\n    },\n    onCreateFormClicked: function onCreateFormClicked() {\n      PUB = this.currentWebsite;\n      this.dialogModel = {\n        visible: true,\n        useRecaptcha: false,\n        title: \"Add form to \" + this.currentWebsite.alias,\n        confirmButton: \"Create\",\n        aliasField: \"\",\n        update: false,\n        formToBeUpdatedIdId: '',\n        formToBeUpdated: null\n      };\n    },\n    onEditFormClicked: function onEditFormClicked(form) {\n      this.dialogModel = {\n        visible: true,\n        useRecaptcha: form.recaptcha,\n        title: \"Update form \" + form.alias,\n        confirmButton: \"Confirm\",\n        aliasField: form.alias,\n        update: true,\n        formToBeUpdatedId: form.key,\n        formToBeUpdated: form\n      };\n    },\n    deleteForm: function deleteForm(form) {\n      var formId = this.dialogModel.formToBeUpdatedId;\n      this.$store.dispatch('deleteForm', formId);\n      this.dialogModel.visible = false;\n    }\n  },\n  computed: {\n    currentWebsite: function currentWebsite() {\n      return this.$store.getters.currentWebsite;\n    },\n    formsCount: function formsCount() {\n      if (this.currentWebsite.forms !== undefined && this.currentWebsite.forms !== null) return objToArray(this.currentWebsite.forms).length;else return 0;\n    }\n  }\n};\n\nfunction snapshotToArray(snapshot) {\n  var returnArr = [];\n  console.log(_typeof(snapshot));\n  snapshot.forEach(function (childSnapshot) {\n    var item = childSnapshot.val();\n    item.key = childSnapshot.key;\n    returnArr.push(item);\n  });\n  return returnArr;\n}",{"version":3,"sources":["Forms.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;;AAEA,yBACA;6CACA;sBACA;eACA;AACA;;;AAIA;QAEA;;AACA;;wBACA;;;iBAGA;eACA;sBACA;oBACA;uBACA;gBACA;2BACA;yBACA,AACA;AATA;;iBAWA,MACA,AACA;;AAHA;sBAKA,AACA;AAjBA;AAkBA;;2BAEA;8BACA;AACA;;AACA;;gBAEA;wCACA,kBAEA;uEACA;AACA;sGACA,UACA;uBACA,aACA;AACA;oBACA;AACA;kDAGA;gBACA,gBAEA;;mCACA;6BACA;kCAEA;sCACA;oCACA,AACA,AAEA;AANA;aAOA;6BACA;kCAEA;sCACA,AACA,AAEA;AALA;AAMA;;iCACA;AACA;wDACA;iBACA;;iBAEA;sBACA;oDACA;uBACA;oBACA;gBACA;6BACA;yBACA,AACA;AATA;AAUA;wDACA;;iBAEA;2BACA;qCACA;uBACA;yBACA;gBACA;gCACA;yBACA,AACA;AATA;AAUA;0CACA;oCAGA;yCACA;iCAGA;AACA,AACA;AA/EA;;8CAiFA;iCACA;AACA;sCACA;mFACA,mDACA,AACA,mBACA;AAEA,AAGA;AAbA;AAvGA;;AAuHA,mCACA;kBAEA;sBAEA;4CACA;6BACA;6BAGA;mBACA;AAEA;SACA","file":"Forms.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n\r\n\r\n\r\n    <v-layout row wrap >\r\n        <v-container v-if=\"formsCount<1\" bg fill-height grid-list-md text-xs-center>\r\n            <v-layout row wrap align-center>\r\n                <v-flex>\r\n                    <h3 class=\"display-1 text--secondary text--lighten-3\">\r\n                        You have no forms at the moment, click <span class=\"deep-purple--text text--lighten-3\">+</span> to create a form\r\n                    </h3>\r\n                </v-flex>\r\n            </v-layout>\r\n        </v-container>\r\n\r\n\r\n\r\n\r\n        <FormCard v-for=\"form in currentWebsite.forms\" :key=\"form.key\" v-bind:form=\"form\"\r\n                  v-on:onEditFormClicked=\"onEditFormClicked\"></FormCard>\r\n\r\n        <v-btn fab bottom right color=\"primary\" dark fixed @click=\"onCreateFormClicked\">\r\n            <v-icon>add</v-icon>\r\n        </v-btn>\r\n\r\n\r\n        <v-dialog v-model=\"dialogModel.visible\" width=\"800px\">\r\n\r\n\r\n            <v-card>\r\n                <v-form v-model=\"formValidModel\" ref=\"form\" @submit.prevent=\"\">\r\n                    <v-card-title class=\"grey lighten-4 py-4 title deep-purple--text\">\r\n                        {{dialogModel.title}}\r\n                    </v-card-title>\r\n                    <v-container grid-list-sm class=\"pa-5\">\r\n                        <v-layout row wrap>\r\n                            <v-flex xs12>\r\n                                <v-text-field\r\n                                        :rules=\"[min3, uniqueFormName]\" required=\"\"\r\n                                        prepend-icon=\"assignment\"\r\n                                        label=\"Form alias\" v-model=\"dialogModel.aliasField\"\r\n                                ></v-text-field>\r\n                            </v-flex>\r\n                            <v-flex xs12>\r\n                                <v-switch label=\"Use ReCAPTCHA\" :disabled=\"!currentWebsite.recaptcha\"\r\n                                          v-model=\"dialogModel.useRecaptcha\"\r\n                                ></v-switch>\r\n                            </v-flex>\r\n\r\n\r\n                        </v-layout>\r\n                    </v-container>\r\n                    <v-card-actions>\r\n                        <v-btn flat color=\"red\" @click=\"deleteForm\" v-if=\"dialogModel.update\">Delete form</v-btn>\r\n\r\n                        <v-spacer></v-spacer>\r\n                        <v-btn flat color=\"primary\" @click=\"dialogModel.visible = false\">Cancel</v-btn>\r\n\r\n                        <v-btn flat color=\"primary\" @click=\"onAddFormConfirm()\" v-text=\"dialogModel.confirmButton\">\r\n                            Create\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-form>\r\n            </v-card>\r\n\r\n        </v-dialog>\r\n\r\n\r\n    </v-layout>\r\n\r\n\r\n\r\n</template>\r\n\r\n\r\n<script>\r\n    /* eslint-disable */\r\n    import FormCard from \"./FormCard\";\r\n\r\n    function objToArray(obj) {\r\n        return Object.keys(obj).map(function (key) {\r\n            obj[key]['key'] = key;\r\n            return obj[key];\r\n        });\r\n    }\r\n\r\n\r\n\r\n    export default {\r\n        name: \"Forms\",\r\n        components: {FormCard},\r\n        data: function () {\r\n            return {\r\n                dialogModel: {\r\n                    visible: false,\r\n                    title: '',\r\n                    useRecaptcha: false,\r\n                    aliasField: \"\",\r\n                    confirmButton: \"Create\",\r\n                    update: false,\r\n                    formToBeUpdatedId: '',\r\n                    formToBeUpdated: null\r\n                },\r\n                deleteFormDialog:{\r\n                    visible:false,\r\n                    //todo\r\n                },\r\n                formValidModel: false\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            min3: v => {\r\n                return v.length >= 3 || 'Field must have more than 3 characters'\r\n            },\r\n            uniqueFormName: function (v) {\r\n                let res = true;\r\n\r\n                if (this.currentWebsite.forms === undefined)\r\n                    return true;\r\n\r\n                Object.values(this.currentWebsite.forms).forEach((form) => {\r\n                    // if the form didnt change name\r\n                    if (this.dialogModel.formToBeUpdated !== null && this.dialogModel.formToBeUpdated.alias === v)\r\n                        return true;\r\n                    if (v === form.alias)\r\n                        res = false;\r\n                });\r\n                return res || 'Form name must be unique to avoid confusion';\r\n            },\r\n            onAddFormConfirm: function () {\r\n\r\n\r\n                if (!this.formValidModel)\r\n                    return;\r\n\r\n                if (this.dialogModel.update) {\r\n                    this.$store.dispatch('updateForm',\r\n                        {\r\n                            alias: this.dialogModel.aliasField,\r\n                            recaptcha: this.dialogModel.useRecaptcha,\r\n                            form_id: this.dialogModel.formToBeUpdatedId\r\n                        }\r\n                    );\r\n\r\n                } else {\r\n                    this.$store.dispatch('addFormToWebsite',\r\n                        {\r\n                            alias: this.dialogModel.aliasField,\r\n                            recaptcha: this.dialogModel.useRecaptcha\r\n                        }\r\n                    );\r\n\r\n                }\r\n                this.dialogModel.visible = false;\r\n            },\r\n            onCreateFormClicked: function () {\r\n                PUB = this.currentWebsite;\r\n                this.dialogModel = {\r\n                    visible: true,\r\n                    useRecaptcha: false,\r\n                    title: \"Add form to \" + this.currentWebsite.alias,\r\n                    confirmButton: \"Create\",\r\n                    aliasField: \"\",\r\n                    update: false,\r\n                    formToBeUpdatedIdId: '',\r\n                    formToBeUpdated: null\r\n                }\r\n            },\r\n            onEditFormClicked: function (form) {\r\n                this.dialogModel = {\r\n                    visible: true,\r\n                    useRecaptcha: form.recaptcha,\r\n                    title: \"Update form \" + form.alias,\r\n                    confirmButton: \"Confirm\",\r\n                    aliasField: form.alias,\r\n                    update: true,\r\n                    formToBeUpdatedId: form.key,\r\n                    formToBeUpdated: form\r\n                }\r\n            },\r\n            deleteForm: function (form) {\r\n                let formId = this.dialogModel.formToBeUpdatedId;\r\n\r\n\r\n                        this.$store.dispatch('deleteForm', formId);\r\n                        this.dialogModel.visible = false;\r\n\r\n\r\n            }\r\n        },\r\n        computed: {\r\n            currentWebsite: function () {\r\n                return this.$store.getters.currentWebsite;\r\n            },\r\n            formsCount: function(){\r\n                if(this.currentWebsite.forms !== undefined && this.currentWebsite.forms !== null)\r\n                    return objToArray(this.currentWebsite.forms).length;\r\n                else\r\n                    return 0;\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function snapshotToArray(snapshot) {\r\n        let returnArr = [];\r\n\r\n        console.log(typeof snapshot);\r\n\r\n        snapshot.forEach(function (childSnapshot) {\r\n            let item = childSnapshot.val();\r\n            item.key = childSnapshot.key;\r\n\r\n\r\n            returnArr.push(item);\r\n        });\r\n\r\n        return returnArr;\r\n    }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n    @import \"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\";\r\n\r\n    .bold {\r\n        font-weight: bold !important;\r\n    }\r\n\r\n\r\n</style>"]}]}