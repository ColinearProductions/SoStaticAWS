{"remainingRequest":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\node_modules\\vue-loader\\lib\\selector.js?type=script&index=0!C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\src\\App.vue","dependencies":[{"path":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\src\\App.vue","mtime":1546435665815},{"path":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\package.json","mtime":1552761763060},{"path":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524914320676},{"path":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000},{"path":"C:\\Users\\Razvan\\Dropbox\\SoStaticAWS\\site\\node_modules\\vue-loader\\lib\\selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport MSnackBar from \"./components/TinyComponents/MSnackBar\";\nimport Layout from './components/Layout.vue';\nimport Loader from './components/TinyComponents/Loader';\nimport LandingPage from './components/LandingPage';\nimport Vue from 'vue';\nimport Vuex from \"vuex\";\nimport * as api from './firebase_api';\nimport firebase from 'firebase';\nVue.use(Vuex);\nimport router from './router';\nfirebase.auth().onAuthStateChanged(function (user) {\n  if (user) {\n    store.commit('setLoggedInState', true);\n    store.commit('setUser', user);\n    console.log('Logged in', user);\n    firebase.auth().currentUser.getIdToken(\n    /* forceRefresh */\n    true).then(function (idToken) {\n      store.commit('setUserToken', idToken);\n    }).catch(function (error) {});\n    api.getWebsitesOfUser(function (snapshot) {\n      console.log('Websites count', snapshot.length);\n\n      if (snapshot.length < 1) {\n        router.push('/setup');\n      } else {\n        store.commit('setInitialData', snapshot);\n      }\n\n      store.commit('setLoaderVisibility', false);\n    });\n  } else {\n    //user logged out\n    store.commit('setLoggedInState', false);\n    router.push('/');\n    store.commit('setLoaderVisibility', false);\n  }\n});\nvar store = new Vuex.Store({\n  state: {\n    currentWebsite: '0',\n    loaderVisible: true,\n    isLoggedIn: false,\n    isCreateWebsiteDialogVisible: false,\n    snackbarVisible: false,\n    snackbarText: '',\n    websitesData: [{\n      \"alias\": \"Loading\",\n      \"contacts\": [],\n      \"httpsOnly\": true,\n      \"owner\": \"\",\n      \"recaptcha\": false,\n      \"secret\": \"recaptcha secret\",\n      \"sitekey\": \"recaptcha sitekey\",\n      \"url\": \"loading.com\",\n      \"key\": \"\",\n      \"messagesCount\": 128,\n      \"formsPercentage\": 34,\n      \"messagesPercentage\": 7,\n      \"forms\": {}\n    }],\n    pendingModification: false,\n    user: null,\n    userToken: null\n  },\n  mutations: {\n    setInitialData: function setInitialData(state, payload) {\n      state.websitesData = payload;\n    },\n    setLoggedInState: function setLoggedInState(state, payload) {\n      state.isLoggedIn = payload;\n      if (payload === false) state.user = null;\n    },\n    setUser: function setUser(state, payload) {\n      state.user = payload;\n      console.log(\"USER JUST GOT SET\");\n    },\n    setUserToken: function setUserToken(state, token) {\n      state.userToken = token;\n    },\n    updateCurrentWebsite: function updateCurrentWebsite(state, payload) {\n      console.log(state, payload);\n      state.currentWebsite = payload;\n    },\n    addWebsite: function addWebsite(state, website) {\n      state.websitesData.push(website);\n      state.currentWebsite = state.websitesData.indexOf(website);\n    },\n    setPendingModification: function setPendingModification(state, pendingModification) {\n      state.pendingModification = pendingModification;\n    },\n    setLoaderVisibility: function setLoaderVisibility(state, visible) {\n      state.loaderVisible = visible;\n    },\n    updateWebsiteData: function updateWebsiteData(state, website) {\n      for (var i = 0; i < state.websitesData.length; i++) {\n        var w = state.websitesData[i];\n        console.log('Update Website Data');\n        console.log(website, w, website.key === w.key);\n\n        if (website.key === w.key) {\n          Vue.set(state.websitesData, i, website);\n        }\n      }\n\n      state.loaderVisible = false;\n    },\n    setCreateWebsiteDialogVisibility: function setCreateWebsiteDialogVisibility(state, visiblility) {\n      state.isCreateWebsiteDialogVisible = visiblility;\n    },\n    updateFormById: function updateFormById(state, payload) {\n      console.log(\"Trying to update local version of form\", payload);\n      var newAlias = payload.alias;\n      var recaptcha = payload.recaptcha;\n      var formId = payload.form_id;\n      console.log(state.websitesData[state.currentWebsite].forms[formId]);\n      state.websitesData[state.currentWebsite].forms[formId].alias = newAlias;\n      state.websitesData[state.currentWebsite].forms[formId].recaptcha = recaptcha;\n      state.loaderVisible = false;\n    },\n    removeForm: function removeForm(state, formId) {\n      console.log(\"REMOVED FORM\");\n      Vue.delete(state.websitesData[state.currentWebsite].forms, formId);\n      delete state.websitesData[state.currentWebsite].forms[formId];\n      state.loaderVisible = false;\n    },\n    showSnackbar: function showSnackbar(state, text) {\n      state.snackbarVisible = false;\n      state.snackbarText = text;\n      state.snackbarVisible = true;\n    },\n    hideSnackbar: function hideSnackbar(state) {\n      state.snackbarText = '';\n      state.snackbarVisible = false;\n    }\n  },\n  getters: {\n    currentWebsiteClone: function currentWebsiteClone(state) {\n      console.log(state.websitesData[state.currentWebsite]);\n      return JSON.parse(JSON.stringify(state.websitesData[state.currentWebsite]));\n    },\n    currentWebsite: function currentWebsite(state) {\n      return state.websitesData[state.currentWebsite];\n    },\n    getPendingModification: function getPendingModification(state) {\n      return state.pendingModification;\n    },\n    getLoaderVisible: function getLoaderVisible(state) {\n      return state.loaderVisible;\n    },\n    getIsCreateWebsiteDialogVisible: function getIsCreateWebsiteDialogVisible(state) {\n      return state.isCreateWebsiteDialogVisible;\n    },\n    getIsLoggedIn: function getIsLoggedIn(state) {\n      return state.isLoggedIn;\n    },\n    getSnackbarVisible: function getSnackbarVisible(state) {\n      return state.snackbarVisible;\n    },\n    getSnackbarText: function getSnackbarText(state) {\n      return state.snackbarText;\n    },\n    getUser: function getUser(state) {\n      console.log(\"TRYING TO GET USER\");\n      return state.user;\n    }\n  },\n  actions: {\n    createWebsite: function createWebsite(context, website) {\n      context.commit('setLoaderVisibility', true);\n      console.log(website);\n      website.forms = {};\n      api.addWebsite(website, function (snapshot) {\n        console.log(snapshot);\n        var newWebsiteKey = snapshot.key;\n        api.getWebsitesById(newWebsiteKey, function (snapshot) {\n          console.log(\"api.getWebsitesById(newWebsiteKey, function(snapshot)\", snapshot);\n          context.commit('addWebsite', snapshot);\n          context.commit('setLoaderVisibility', false);\n          router.push('/app/settings');\n          context.commit('showSnackbar', 'Form ' + website.alias + ' created successfully');\n          context.commit('setCreateWebsiteDialogVisibility', false);\n        });\n      });\n    },\n    addFormToWebsite: function addFormToWebsite(context, form) {\n      context.commit('setLoaderVisibility', true);\n      var current_website_key = context.getters.currentWebsite.key;\n      api.addFormToWebsite(current_website_key, form, function (snapshot) {\n        console.log(snapshot);\n        api.getWebsitesById(current_website_key, function (snapshot) {\n          console.log(snapshot);\n          context.commit('updateWebsiteData', snapshot);\n          context.commit('showSnackbar', 'Form ' + form.alias + ' created successfully');\n        });\n      });\n    },\n    updateWebsite: function updateWebsite(context, website) {\n      context.commit('setLoaderVisibility', true);\n      api.updateWebsite(website, function () {\n        context.commit('updateWebsiteData', JSON.parse(JSON.stringify(website)));\n        context.commit('setPendingModification', false);\n        context.commit('showSnackbar', 'Update webste ' + website.alias + ' successful');\n      });\n    },\n    updateForm: function updateForm(context, data) {\n      context.commit('setLoaderVisibility', true);\n      var updateData = {\n        alias: data.alias,\n        recaptcha: data.recaptcha\n      };\n      var form_key = data.form_id;\n      var current_website_key = context.getters.currentWebsite.key;\n      api.updateForm(current_website_key, form_key, updateData, function () {\n        context.commit('updateFormById', data);\n      });\n    },\n    deleteForm: function deleteForm(context, formId) {\n      context.commit('setLoaderVisibility', true);\n      var websiteId = context.getters.currentWebsite.key;\n      api.deleteForm(websiteId, formId, function () {\n        context.commit('removeForm', formId);\n      });\n    }\n  }\n});\nrouter.beforeEach(function (to, from, next) {\n  if (store.getters.getPendingModification) {\n    if (!store.getters.getIsLoggedIn) {\n      next();\n      return;\n    }\n\n    if (confirm('Do you want to proceed?')) {\n      store.commit(\"setPendingModification\", false);\n      next();\n    } else {\n      next(false);\n    }\n  } else {\n    next();\n  }\n});\nexport default {\n  name: 'app',\n  components: {\n    MSnackBar: MSnackBar,\n    Layout: Layout,\n    Loader: Loader,\n    LandingPage: LandingPage\n  },\n  data: function data() {\n    return {\n      s: store\n    };\n  },\n  store: store\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA,mDAGA;YACA;qCACA;4BAEA;6BAEA;;;kCACA;mCAEA;8BAEA,CAIA;8CAEA;6CACA;;+BACA;oBACA;aACA;uCACA;AAEA;;0CAEA;AACA;SACA;AACA;qCACA;gBACA;wCAEA;AACA;;AAGA;;oBAGA;mBACA;gBACA;kCACA;qBACA;kBACA;;eAEA;kBACA;mBACA;eACA;mBACA;gBACA;iBACA;aACA;aACA;uBACA;yBACA;4BACA;eACA,AACA;AAdA;yBAeA;UACA;eAEA,AACA;AA1BA;;4DA4BA;2BACA;AACA;gEACA;yBACA;sBACA,oBACA;AACA;8CACA;mBACA;kBACA;AACA;sDACA;wBAEA;AACA;wEACA;yBACA;6BACA;AACA;oDACA;8BACA;wDAGA;AACA;wFACA;kCACA;AACA;sEACA;4BAEA;AACA;kEACA;0DACA;mCACA;oBACA;kDACA;;mCACA;yCACA;AAGA;AACA;;4BACA;AACA;oGACA;2CACA;AACA;4DACA;4DACA;6BACA;8BACA;2BAEA;iEACA;qEACA;yEACA;4BAGA;AACA;mDACA;kBACA;iEACA;4DAKA;4BAGA;AACA;qDACA;8BACA;2BACA;8BACA;AACA;+CACA;2BACA;8BACA;AAEA,AACA;AArFA;;6DAuFA;2CACA;gEACA;AACA;mDACA;sCACA;AACA;mEACA;mBACA;AACA;uDACA;mBACA;AACA;qFACA;mBACA;AACA;iDACA;mBACA;AACA;2DACA;mBACA;AACA;qDACA;mBACA;AACA;qCACA;kBACA;mBACA;AAGA,AACA;AAhCA;;4DAkCA;4CACA;kBACA;sBACA;kDACA;oBACA;qCACA;+DACA;+EACA;uCACA;gDACA;sBACA;mEACA;6DAEA;AACA;AACA;AACA;+DACA;4CACA;+DAEA;0EACA;oBAEA;qEACA;sBACA;8CACA;gEAGA;AACA;AACA;AACA;4DACA;4CACA;6CAEA;sEACA;iDACA;0EACA;AAEA;AACA;mDACA;4CACA;;;wBAEA;;0BACA;+DAEA;4EACA;yCAEA;AACA;AACA;qDACA;4CACA;qDACA;oDACA;qCAEA;AACA;AAEA,AACA;AAlEA;AAnJA;AAwNA,4CACA;4CACA;sCACA;AACA;AACA;AAEA;;4CACA;6CAEA;AACA;WAEA;WACA;AACA;SACA;AACA;AAEA;;AAEA;QAEA;;AAEA;;;AACA,AACA;AAHA;wBAIA;;SAEA,AACA;AAFA;AAGA;AACA;AAXA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app\">\n\n\n        <Loader></Loader>\n        <router-view></router-view>\n        <MSnackBar></MSnackBar>\n    </div>\n</template>\n\n<script>\n    /* eslint-disable */\n    import MSnackBar from \"./components/TinyComponents/MSnackBar\";\n\n    import Layout from './components/Layout.vue'\n    import Loader from './components/TinyComponents/Loader'\n    import LandingPage from './components/LandingPage'\n    import Vue from 'vue'\n    import Vuex from \"vuex\";\n\n    import * as api from './firebase_api';\n    import firebase from 'firebase';\n\n    Vue.use(Vuex);\n\n    import router from './router'\n\n\n    firebase.auth().onAuthStateChanged(function (user) {\n\n\n        if (user) {\n            store.commit('setLoggedInState', true);\n            store.commit('setUser', user);\n\n            console.log('Logged in', user);\n\n            firebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function(idToken) {\n                store.commit('setUserToken', idToken);\n\n            }).catch(function(error) {\n\n            });\n\n\n\n            api.getWebsitesOfUser((snapshot) => {\n\n                console.log('Websites count', snapshot.length);\n                if (snapshot.length < 1) {\n                    router.push('/setup');\n                } else {\n                    store.commit('setInitialData', snapshot);\n                }\n\n                store.commit('setLoaderVisibility', false)\n\n            });\n        } else {\n            //user logged out\n            store.commit('setLoggedInState', false);\n            router.push('/');\n            store.commit('setLoaderVisibility', false)\n\n        }\n    });\n\n\n    const store = new Vuex.Store({\n        state: {\n            currentWebsite: '0',\n            loaderVisible: true,\n            isLoggedIn: false,\n            isCreateWebsiteDialogVisible: false,\n            snackbarVisible: false,\n            snackbarText: '',\n            websitesData: [{\n                \"alias\": \"Loading\",\n                \"contacts\": [],\n                \"httpsOnly\": true,\n                \"owner\": \"\",\n                \"recaptcha\": false,\n                \"secret\": \"recaptcha secret\",\n                \"sitekey\": \"recaptcha sitekey\",\n                \"url\": \"loading.com\",\n                \"key\": \"\",\n                \"messagesCount\": 128,\n                \"formsPercentage\": 34,\n                \"messagesPercentage\": 7,\n                \"forms\": {}\n            }],\n            pendingModification: false,\n            user: null,\n            userToken:null\n\n        },\n        mutations: {\n            setInitialData(state, payload) {\n                state.websitesData = payload\n            },\n            setLoggedInState(state, payload) {\n                state.isLoggedIn = payload;\n                if (payload === false)\n                    state.user = null;\n            },\n            setUser(state, payload) {\n                state.user = payload;\n                console.log(\"USER JUST GOT SET\");\n            },\n            setUserToken(state,token){\n              state.userToken = token;\n\n            },\n            updateCurrentWebsite(state, payload) {\n                console.log(state, payload);\n                state.currentWebsite = payload;\n            },\n            addWebsite(state, website) {\n                state.websitesData.push(website);\n                state.currentWebsite = state.websitesData.indexOf(website);\n\n\n            },\n            setPendingModification(state, pendingModification) {\n                state.pendingModification = pendingModification;\n            },\n            setLoaderVisibility(state, visible) {\n               state.loaderVisible = visible;\n\n            },\n            updateWebsiteData(state, website) {\n                for (let i = 0; i < state.websitesData.length; i++) {\n                    let w = state.websitesData[i];\n                    console.log('Update Website Data');\n                    console.log(website, w, website.key === w.key);\n                    if (website.key === w.key) {\n                        Vue.set(state.websitesData, i, website);\n                    }\n\n\n                }\n                state.loaderVisible = false;\n            },\n            setCreateWebsiteDialogVisibility(state, visiblility) {\n                state.isCreateWebsiteDialogVisible = visiblility\n            },\n            updateFormById(state, payload) {\n                console.log(\"Trying to update local version of form\", payload);\n                let newAlias = payload.alias;\n                let recaptcha = payload.recaptcha;\n                let formId = payload.form_id;\n\n                console.log(state.websitesData[state.currentWebsite].forms[formId]);\n                state.websitesData[state.currentWebsite].forms[formId].alias = newAlias;\n                state.websitesData[state.currentWebsite].forms[formId].recaptcha = recaptcha;\n                state.loaderVisible = false;\n\n\n            },\n            removeForm(state, formId) {\n                console.log(\"REMOVED FORM\");\n                Vue.delete(state.websitesData[state.currentWebsite].forms, formId);\n                delete state.websitesData[state.currentWebsite].forms[formId];\n\n\n\n\n                state.loaderVisible = false;\n\n\n            },\n            showSnackbar(state, text) {\n                state.snackbarVisible = false;\n                state.snackbarText = text;\n                state.snackbarVisible = true;\n            },\n            hideSnackbar(state) {\n                state.snackbarText = '';\n                state.snackbarVisible = false;\n            }\n\n        },\n        getters: {\n            currentWebsiteClone: function (state) {\n                console.log(state.websitesData[state.currentWebsite]);\n                return JSON.parse(JSON.stringify(state.websitesData[state.currentWebsite]));\n            },\n            currentWebsite: function (state) {\n                return state.websitesData[state.currentWebsite];\n            },\n            getPendingModification(state) {\n                return state.pendingModification;\n            },\n            getLoaderVisible(state) {\n                return state.loaderVisible;\n            },\n            getIsCreateWebsiteDialogVisible(state) {\n                return state.isCreateWebsiteDialogVisible;\n            },\n            getIsLoggedIn(state) {\n                return state.isLoggedIn\n            },\n            getSnackbarVisible(state) {\n                return state.snackbarVisible;\n            },\n            getSnackbarText(state) {\n                return state.snackbarText;\n            },\n            getUser(state) {\n                console.log(\"TRYING TO GET USER\");\n                return state.user;\n            }\n\n\n        },\n        actions: {\n            createWebsite(context, website) {\n                context.commit('setLoaderVisibility', true);\n                console.log(website);\n                website.forms = {};\n                api.addWebsite(website, function (snapshot) {\n                    console.log(snapshot);\n                    let newWebsiteKey = snapshot.key;\n                    api.getWebsitesById(newWebsiteKey, function (snapshot) {\n                        console.log(\"api.getWebsitesById(newWebsiteKey, function(snapshot)\", snapshot);\n                        context.commit('addWebsite', snapshot);\n                        context.commit('setLoaderVisibility', false);\n                        router.push('/app/settings');\n                        context.commit('showSnackbar', 'Form ' + website.alias + ' created successfully');\n                        context.commit('setCreateWebsiteDialogVisibility', false);\n\n                    })\n                })\n            },\n            addFormToWebsite(context, form) {\n                context.commit('setLoaderVisibility', true);\n                let current_website_key = context.getters.currentWebsite.key;\n\n                api.addFormToWebsite(current_website_key, form, function (snapshot) {\n                    console.log(snapshot);\n\n                    api.getWebsitesById(current_website_key, function (snapshot) {\n                        console.log(snapshot);\n                        context.commit('updateWebsiteData', snapshot);\n                        context.commit('showSnackbar', 'Form ' + form.alias + ' created successfully');\n\n\n                    })\n                })\n            },\n            updateWebsite(context, website) {\n                context.commit('setLoaderVisibility', true);\n                api.updateWebsite(website, () => {\n\n                    context.commit('updateWebsiteData', JSON.parse(JSON.stringify(website)));\n                    context.commit('setPendingModification', false);\n                    context.commit('showSnackbar', 'Update webste ' + website.alias + ' successful');\n                })\n\n            },\n            updateForm(context, data) {\n                context.commit('setLoaderVisibility', true);\n                let updateData = {alias: data.alias, recaptcha: data.recaptcha};\n\n                let form_key = data.form_id;\n                let current_website_key = context.getters.currentWebsite.key;\n\n                api.updateForm(current_website_key, form_key, updateData, function () {\n                    context.commit('updateFormById', data);\n\n                });\n            },\n            deleteForm(context, formId) {\n                context.commit('setLoaderVisibility', true);\n                let websiteId = context.getters.currentWebsite.key;\n                api.deleteForm(websiteId, formId, () => {\n                    context.commit('removeForm', formId);\n\n                })\n            }\n\n        }\n    });\n\n\n    router.beforeEach((to, from, next) => {\n        if (store.getters.getPendingModification) {\n            if(!store.getters.getIsLoggedIn) {\n                next();\n                return;\n            }\n\n            if (confirm('Do you want to proceed?')) {\n                store.commit(\"setPendingModification\", false);\n\n                next();\n            } else {\n\n                next(false);\n            }\n        } else {\n            next();\n        }\n\n    });\n\n    export default {\n        name: 'app',\n        components: {\n            MSnackBar,\n            Layout, Loader, LandingPage\n        },\n        data: function () {\n            return {\n                s: store\n            }\n        },\n        store\n    }\n</script>\n\n<style>\n\n</style>\n"]}]}