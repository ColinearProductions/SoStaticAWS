(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.vuetifyConfirm = factory());
}(this, (function () { 'use strict';

var Confirm = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('v-dialog', { attrs: { "value": "true", "max-width": _vm.width }, on: { "input": _vm.change } }, [!!_vm.title ? _c('v-toolbar', { attrs: { "dark": "", "color": _vm.color, "dense": "" } }, [!!_vm.icon ? _c('v-icon', [_vm._v(_vm._s(_vm.icon))]) : _vm._e(), _vm._v(" "), _c('v-toolbar-title', { staticClass: "white--text", domProps: { "textContent": _vm._s(_vm.title) } })], 1) : _vm._e(), _vm._v(" "), _c('v-card', { attrs: { "tile": "" } }, [_c('v-card-text', { domProps: { "innerHTML": _vm._s(_vm.message) } }), _vm._v(" "), _c('v-card-actions', [_c('v-spacer'), _vm._v(" "), _c('v-btn', { attrs: { "color": _vm.buttonTrueColor, "flat": "" }, on: { "click": function ($event) {
          _vm.choose(true);
        } } }, [_vm._v(_vm._s(_vm.buttonTrueText))]), _vm._v(" "), _c('v-btn', { attrs: { "color": _vm.buttonFalseColor, "flat": "" }, on: { "click": function ($event) {
          _vm.choose(false);
        } } }, [_vm._v(_vm._s(_vm.buttonFalseText))])], 1)], 1)], 1);
  }, staticRenderFns: [],
  props: {
    buttonTrueText: {
      type: String,
      default: 'Yes'
    },
    buttonFalseText: {
      type: String,
      default: 'No'
    },
    buttonTrueColor: {
      type: String,
      default: 'primary'
    },
    buttonFalseColor: {
      type: String,
      default: 'grey'
    },
    color: {
      type: String,
      default: 'warning'
    },
    icon: {
      type: String,
      default: 'warning'
    },
    message: {
      type: String,
      reqiured: true
    },
    title: {
      type: String
    },
    width: {
      type: Number,
      default: 300
    }
  },
  data: function data() {
    return {
      value: false
    };
  },
  methods: {
    choose: function choose(value) {
      this.$emit('result', value);
      this.value = value;
      this.$destroy();
    },

    change: function change(res) {
      this.$destroy();
    }
  }
};

function Install(Vue, options) {
  var property = options && options.property || '$confirm';
  function createDialogCmp(options) {
    return new Promise(function (resolve) {
      var cmp = new Vue(Object.assign(Confirm, {
        destroyed: function (c) {
          document.body.removeChild(cmp.$el);
          resolve(cmp.value);
        }
      }));
      Object.assign(cmp, Vue.prototype.$confirm.options || {}, options);
      document.body.appendChild(cmp.$mount().$el);
    });
  }

  function show(message, options) {
    if ( options === void 0 ) options = {};

    options.message = message;
    return createDialogCmp(options);
  }

  Vue.prototype[property] = show;
  Vue.prototype[property].options = options || {};
}

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(Install);
}

return Install;

})));
